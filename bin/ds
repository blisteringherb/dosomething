#!/bin/bash

# ==============================================================================
# GLOBALS
# ==============================================================================

# Absolute pathe of this script
SCRIPT_PATH=`dirname "$0"`

# The base project directory
# If DS_APP_ROOT is not provided, the script will use parent folder as base path
BASE_PATH=${DS_APP_ROOT:-`dirname $SCRIPT_PATH`}

# The webroot directory name for the dev environment
WEB_DIR='html'

# Full webroot path
WEB_PATH=$BASE_PATH/$WEB_DIR

# The lib directory name
LIB_DIR='lib'

# Full lib path
LIB_PATH=$BASE_PATH/$LIB_DIR

# The config directory name
CONFIG_DIR='config'

# Full config path
CONFIG_PATH=$BASE_PATH/$CONFIG_DIR

# The test directory name
TEST_DIR='tests'

# Full test path
TEST_PATH=$BASE_PATH/$TEST_DIR

# Build directory name
BUILD_DIR='build'

# Project build make file
BUILD_MAKEFILE=$BASE_PATH/build-dosomething.make

# ==============================================================================
# Functions
# ==============================================================================

#=== FUNCTION ==================================================================
# NAME: art
# DESCRIPTION: Returns DS ascii art to console
#===============================================================================
function art {
  echo '     _____          ___     ';
  echo '    /  /::\        /  /\    ';
  echo '   /  /:/\:\      /  /:/_   ';
  echo '  /  /:/  \:\    /  /:/ /\  ';
  echo ' /__/:/ \__\:|  /  /:/ /::\ ';
  echo ' \  \:\ /  /:/ /__/:/ /:/\:\';
  echo '  \  \:\  /:/  \  \:\/:/~/:/';
  echo '   \  \:\/:/    \  \::/ /:/ ';
  echo '    \  \::/      \__\/ /:/  ';
  echo '     \__\/         /__/:/   ';
  echo '                   \__\/    ';
}

#=== FUNCTION ==================================================================
# NAME: help
# DESCRIPTION: Returns help text to console
#===============================================================================
function help {
  read -d '' help <<"USAGE"
usage: ds [build [--install]] [--help]

Runs helper scripts for DoSomething environment.

ds build [--intl] [--install] [--dev]
  Builds your environment with "drush make".  Also symlinks appropriate
  files into their respective directories.

  --install
    Runs "drush site-install" to actually install the Drupal instance.

ds composer
  Installs libraries via Composer within the Drupal libraries directory.

ds grunt [--watch]
  Installs dependencies & compiles front-end assets (SCSS/JS) using Grunt.

  --watch
  Continues watching for changes and recompiles assets as necessary.

ds pull [stage|stage.$AFFILIATE|prod] [--db|--files]
  Drops your local database and pulls database and files from given environment down onto your local build.
  Note: Running 'ds pull stage' will destroy any affiliate sites.
  Run  Run 'ds pull stage.$AFFILIATE' to preserve the folders and

  --db
    Drops your local database and pulls down db from given environment.

  --files
    Pulls down files only. If pulling from an affiliate site, only the files directory
    can be synced to avoid overwriting the html directory.

ds test
  Run unit and US integration tests.

  --unit
  Runs unit tests using Mocha.

  --integration
  Runs integration tests using CasperJS.

ds --help
  Displays this help message.

USAGE
  echo "$help"
}

#=== FUNCTION ==================================================================
# NAME: build
# DESCRIPTION: Builds project from make files.
#===============================================================================
function build {
  # Display ascii art
  art

  set -e
  cd $BASE_PATH

  if [ $WEB_PATH ]; then
    echo 'Wiping html directory...'
    rm -rf "$WEB_PATH"
  fi

  # Do the build
  echo 'Running drush make...'
  drush make --prepare-install --no-gitinfofile --shallow-clone --no-cache "$BUILD_MAKEFILE" "$WEB_DIR"
  set +e

  # Create symlinks
  echo "Creating symlinks"
  symlinks

  echo "Enabling git hooks"

  # Proceed when it's a valid git repo:
  if [[ -d "$BASE_PATH/.git/hooks/" ]]; then
    # Pre-commit.
    HOOK_PRE_COMMIT=$BASE_PATH/.git/hooks/pre-commit

    # When a symlink is not recognized as a file, this means
    # the symlink is broken.
    # Not a file:
    if [[ ! -f $HOOK_PRE_COMMIT ]]; then
      # Bust still a symlink:
      if [[ -L $HOOK_PRE_COMMIT ]]; then
        # Symlink is broken (isn't pointing to a valid file). Removing it,
        # so it will be recreated in the next step.
        rm $HOOK_PRE_COMMIT
      fi
    fi
    # Setup symlink to the pre-commit hook provided with DS installation.
    if [[ ! -L $HOOK_PRE_COMMIT ]]; then
        ln -s ../../hooks/pre-commit $HOOK_PRE_COMMIT
    fi

  fi

  if [[ $1 == "--intl" ]]
  then
    for COUNTRY in botswana canada ghana kenya indonesia nigeria training uk
    do
      build_helper $COUNTRY $2 $3
    done
    echo 'Adding sites.php file'
    ln -s $CONFIG_PATH/sites.php $WEB_PATH/sites/sites.php
  else
    #default
    build_helper 'default' $1 $2
  fi

  # Run grunt task to configure front-end environment
  # this will install Bower/NPM dependencies
  grunt

  echo 'Build complete.'
}


#=== FUNCTION ==================================================================
# NAME: build_helper
# DESCRIPTION: Helper for build function. Performs site-specific actions.
#===============================================================================
function build_helper {

  SITE=$1
  echo $SITE

  if [[ $SITE != "default" ]]
  then
    echo "creating db for $SITE"
    # Create the db, if for some reason it's not there yet.
    mysql -uroot -e "CREATE DATABASE IF NOT EXISTS dosomething_$SITE;"
  else
    echo "creating db for $SITE"
    # Create the db, if for some reason it's not there yet.
    mysql -uroot -e "CREATE DATABASE IF NOT EXISTS dosomething;"
  fi

  echo 'Install composer dependencies'
  composer

  echo "Creating $SITE folder"
  mkdir -p "$WEB_PATH/sites/$SITE"

  # Clear caches and Run updates
  cd "$WEB_PATH/sites/$SITE"

  if [[ $2 == "--install" ]]
  then
    echo "Installing"
    install
  fi

  if [[ $3 == "--dev" ]]
  then
    echo "Dev"
    dev
  fi

  echo 'Replacing settings.php file...'
  sudo rm -f $WEB_PATH/sites/$SITE/settings.php && chmod u+w $WEB_PATH/sites/$SITE
  ln -s $CONFIG_PATH/settings.php $WEB_PATH/sites/$SITE/settings.php

  if [[ $SITE != "default" ]]
  then
    echo 'Replacing database name in settings.php file...'
    sed -i "s/'dosomething'/'dosomething_$SITE'/g" $WEB_PATH/sites/$SITE/settings.php
  fi

  if [[ $SITE == "default" ]]
  then
    if [ ! -e "$CONFIG_PATH/settings.local.php" ]
    then
      echo 'Creating local settings file...'
      cp $CONFIG_PATH/default.settings.local.php $CONFIG_PATH/settings.local.php
    fi

  echo 'Linking local settings file...'
  ln -s $CONFIG_PATH/settings.local.php $WEB_PATH/sites/$SITE/settings.local.php

  fi

  # Before running drush it's required to flush Redis cache to avoid
  # a race condition state between DB and cache.
  if [[ $SITE != "default" ]]
  then
    # Flush only country-specific cache during international deployments.
    echo "Flush Redis cache on $SITE."

    # Solve Redis cache prefix.
    case $DS_ENVIRONMENT in
     "local") CACHE_PREFIX="ds" ;;
     *) CACHE_PREFIX=$SITE ;;
    esac

    # Redis CLI connection settings must be preset.
    redis-cli --raw keys "$CACHE_PREFIX:*" | xargs -n1 redis-cli del
  fi

  echo -n 'Running drush from directory '
  pwd

  echo 'Drush status:'
  drush status

  echo 'Adding role to admin user...'
  drush user-add-role 'administrator' 1

  echo 'Updating database...'
  drush updb -y

  # Enable modules in info file
  echo 'Enabling modules in dosomething.info'
  drush --script-path=$BASE_PATH/bin/ php-script enable_modules.php

  echo 'Reverting Features'
  drush fra -y

  echo 'Clearing caches...'
  drush cc all
}


#=== FUNCTION ==================================================================
# NAME: install
# DESCRIPTION: Installs project using dosomething profile
#===============================================================================
function install {
  SITE=${PWD##*/}
  if [[ $SITE != "default" ]]
  then
    drush site-install dosomething -y --db-url=mysql://root@localhost/dosomething_$SITE --site-name="DoSomething $SITE" --sites-subdir=$SITE
  else
    drush site-install dosomething -y --db-url=mysql://root@localhost/dosomething --site-name=DoSomething
  fi

  echo 'Granting basic permissions...'
  drush rap 'anonymous user' 'access content'
  drush rap 'authenticated user' 'access content'

  # Without command below, view_unpublished module prompts you to
  # The content access permissions need to be rebuilt. Rebuild permissions.
  # This does that.
  echo 'Rebuilding node permissions'
  drush php-eval 'node_access_rebuild();'

  # For whatever weird reason, not all user permissions are set properly afer install.
  # This fixes it.
  echo 'Reverting all features'
  drush -y fra
}

#=== FUNCTION ==================================================================
# NAME: symlinks
# DESCRIPTION: Symlinks web_path modules and themes to lib_path.
#===============================================================================
function symlinks {
  echo 'Linking modules'
  rm -rf "$WEB_PATH/profiles/dosomething/modules/dosomething"
  ln -s "$LIB_PATH/modules/dosomething" "$WEB_PATH/profiles/dosomething/modules/dosomething"

  echo 'Linking themes'
  rm -rf "$WEB_PATH/profiles/dosomething/themes/dosomething/paraneue_dosomething"
  ln -s "$LIB_PATH/themes/dosomething/paraneue_dosomething" "$WEB_PATH/profiles/dosomething/themes/dosomething/paraneue_dosomething"

}

#=== FUNCTION ==================================================================
# NAME: devel
# DESCRIPTION: Enables modules, generates nodes.
#===============================================================================
function dev {
  echo 'Enabling modules'
  drush -y en devel devel_generate

  echo 'Auto-generating Content'
  drush generate-terms sponsors 20
  drush generate-terms tags 50
  drush genc 50 0 --types=image
  drush genc 50 0 --types=campaign

}

#=== FUNCTION ==================================================================
# NAME: deploy
# DESCRIPTION: Deploys project to Pantheon
#===============================================================================
function deploy {
  echo 'deploying'

  BASE_PATH=`pwd -P` # do this to play nice with CI

  if [ $BASE_PATH/$BUILD_DIR ]; then
    echo 'Wiping build directory...'
    rm -rf $BASE_PATH/$BUILD_DIR
  fi

  drush make --no-gitinfofile "$BUILD_MAKEFILE" "$BUILD_DIR"

  ln -s $CONFIG_PATH/settings.php $CONFIG_PATH/$BUILD_DIR/sites/default/settings.php

  export ENV=dev
  export SITE=2b03733d-f60b-f4dd-67fb-9c518a66b3ca

  rsync -rlvz --size-only --ipv4 --progress -e 'ssh -p 2222' $BUILD_DIR/* $ENV.$SITE@appserver.$ENV.$SITE.drush.in:code/

  drush psite-commit $SITE $ENV --message="Deployment"

}

#=== FUNCTION ==================================================================
# NAME: composer
# DESCRIPTION: Installs/Updates composer dependencies
#===============================================================================
function composer {
  if hash composer 2>/dev/null;
  then
    cd $WEB_PATH/profiles/dosomething/libraries/zendesk
    echo -e "\e[4mInstalling composer dependencies for Zendesk...\e[0m"
    eval "/usr/local/bin/composer install"

    cd $WEB_PATH/profiles/dosomething/libraries/messagebroker-phplib
    echo -e "\e[4mInstalling composer dependencies for Message Broker PHPLIB...\e[0m"
    eval "/usr/local/bin/composer install"

    cd $WEB_PATH/profiles/dosomething/libraries/stripe-php
    echo -e "\e[4mInstalling composer dependencies for Stripe PHP Library...\e[0m"
    eval "/usr/local/bin/composer install"

    cd $WEB_PATH/profiles/dosomething/libraries/guzzle
    echo -e "\e[4mInstalling composer dependencies for Guzzle PHP Library...\e[0m"
    eval "/usr/local/bin/composer install"

    cd $BASE_PATH

  fi
}

#=== FUNCTION ==================================================================
# NAME: grunt
# DESCRIPTION: Builds front-end assets (JS/SCSS) using Grunt
#===============================================================================
function grunt {
  cd $LIB_PATH/themes/dosomething/paraneue_dosomething

  if hash npm 2>/dev/null;
  then
    echo -e "\n\e[4mInstalling NPM dependencies...\e[0m"
    eval "/usr/bin/npm install"
  fi

  if hash grunt 2>/dev/null;
  then
    if [[ $1 == "--watch" ]]
    then
      echo -e "\n\e[4mBuilding SCSS/JS with Grunt, and watching for changes...\e[0m"
      echo -e "\e[30;43m(Press Ctrl-C to stop.)\e[0m\n"
      eval "/usr/bin/grunt"
    else
      eval "/usr/bin/grunt build"
    fi
  fi

  cd $BASE_PATH

}

#=== FUNCTION ==================================================================
# NAME: set_alias
# DESCRIPTION: Helper function to get alias for ds pull.
#===============================================================================
function set_alias {
  if [[ $1 == "stage" ]]
  then
    alias[0]=$1
  else
    IFS='.' read -a alias <<< "$1"
  fi
}

#=== FUNCTION ==================================================================
# NAME: pull_db
# DESCRIPTION: Pulls down database from given environment onto local.
#===============================================================================
function pull_db {
  if [[ ${alias[0]} == "stage" ]]
  then
    if [[ ${#alias[@]} == 1 ]]
    then
      cd $WEB_PATH

      echo "Dropping local DB"
      drush -y sql-drop

      echo "Pulling down db from staging"
      drush -y sql-sync @ds.staging @self

      echo "Reverting features..."
      drush -y fra

      echo "Clearing cache..."
      drush cc all

      echo "Enabling Stage File Proxy..."
      drush -y en stage_file_proxy

      echo "Setting Stage File Proxy to staging URL..."
      drush vset stage_file_proxy_origin "http://staging.beta.dosomething.org"

      echo "Unsetting tagged version variable..."
      drush variable-delete ds_version -y

      echo "Reindexing Solr..."
      drush solr-mark-all && drush solr-index

    else
      echo "Pulling down the db from ${alias[1]} staging"
      drush -y sql-sync @ds.${alias[1]}.staging @ds.${alias[1]}.dev
    fi
  fi
}

#=== FUNCTION ==================================================================
# NAME: pull_files
# DESCRIPTION: Pulls down files from given environment onto local.
#===============================================================================
function pull_files {
  if [[ ${alias[0]} == "stage" ]]
  then
    if [[ ${#alias[@]} == 1 ]]
    then
      echo "Pulling down files from stage. Any affiliate sites will be destroyed"
      cd $WEB_PATH
      drush -y rsync @ds.staging @self
      symlinks
    else
      echo "Pulling down files from ${alias[1]} staging"
      cd $WEB_PATH/sites/${alias[1]}
      drush -y rsync @ds.${alias[1]}.staging:%files @ds.${alias[1]}.dev:%files
    fi
  fi
}

#=== FUNCTION ==================================================================
# NAME: check_environment_param
# DESCRIPTION: Outputs error message for invalid alias argument.
#===============================================================================
function check_alias_param {
  if [[ $1 != "stage" ]]
  then
    echo "Alias not found. Valid aliases: stage"
    exit
  fi
}

#=== FUNCTION ==================================================================
# NAME: restart_php5_fpm
# DESCRIPTION: Restarts php5-fpm on servers running php5.
#===============================================================================
function restart_php5_fpm {
  PHP_FPM_STATUS="$(sudo service php5-fpm status)"
  PHP_VERSION="$(php -v|grep --only-matching --perl-regexp "5\.\\d+\.\\d+")"

  if $(echo ${PHP_FPM_STATUS} | grep --quiet "php5-fpm start/running") && $(echo ${PHP_VERSION} | grep --quiet "5.5")
  then
    echo "Restarting PHP-FPM now"
    sudo service php5-fpm restart
  else
    echo "Either php5-fpm is not running or php -v < 5.5. Not restarting."
  fi
}

# ==============================================================================
# Commands
# ==============================================================================

#----------------------------------------------------------------------
# help
#----------------------------------------------------------------------
if [[ $1 == "--help" ]] || [[ $1 == "-h" ]] || [[ $1 == "" ]]
then
  help
fi

#----------------------------------------------------------------------
# build
#----------------------------------------------------------------------
if [[ $1 == "build" ]]
then
  if [[ $2 == "--intl" ]]
  then
    if [[ $3 == "--install" ]] && [[ $4 == "--dev" ]]
    then
      build --intl --install --dev
    elif [[ $3 == "--install" ]]
    then
      build --intl --install
    else
      build --intl
    fi
  else
    if [[ $2 == "--install" ]] && [[ $3 == "--dev" ]]
    then
      build --install --dev
    elif [[ $2 == "--install" ]]
    then
      build --install
    else
      build
    fi
  fi
fi

#----------------------------------------------------------------------
# symlinks
#----------------------------------------------------------------------
if [[ $1 == "symlinks" ]]
then
  symlinks
fi

#----------------------------------------------------------------------
# deploy
#----------------------------------------------------------------------
if [[ $1 == "deploy" ]]
then
  deploy
fi

#----------------------------------------------------------------------
# composer
#----------------------------------------------------------------------
if [[ $1 == "composer" ]]
then
  composer
fi

#----------------------------------------------------------------------
# grunt
#----------------------------------------------------------------------
if [[ $1 == "grunt" ]]
then
  grunt $2
fi

#----------------------------------------------------------------------
# pull
#----------------------------------------------------------------------
if [[ $1 == "pull" ]]
then
  declare -a alias=()
  set_alias $2
  check_alias_param ${alias[0]}
  if [[ $3 == "--db" ]]
  then
    pull_db $2
  elif [[ $3 == "--files" ]]
  then
    pull_files $2
  else
    pull_db $2
    pull_files $2
  fi
fi

#----------------------------------------------------------------------
# test
#----------------------------------------------------------------------
if [[ $1 == "test" ]]
then
  shift
  cd $BASE_PATH
  $BASE_PATH/bin/test $@
fi

#----------------------------------------------------------------------
# restart php5-fpm
#----------------------------------------------------------------------
if [[ $1 == "restart_php" ]]
then
  restart_php5_fpm
fi
