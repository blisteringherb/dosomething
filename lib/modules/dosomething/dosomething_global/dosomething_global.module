<?php
/**
 * @file
 * Code for the DoSomething Global feature.
 */

include_once 'dosomething_global.features.inc';
define("TRANSLATABLE_TYPES", 'static_content,campaign,home');

/**
 * Implements hook_init().
 */
function dosomething_global_init() {
  // Verify we're dealing with a node edit with no translation specification in the URL
  if (arg(0) == "node" && is_numeric(arg(1)) && arg(2) == "edit" && null == arg(3)) {
    // Load the page node and user
    $nid = arg(1);
    $node = node_load($nid);
    global $user;

    // Load the languages being used
    $src_language = $node->language;
    $user_language = $user->language ?: 'en';

    // If we're not working on a translation, no need to re-direct.
    if ($src_language != $user_language) {
      // Determines if the url needs the /add/source/ component
      $new_translation_prefix = isset($node->translations->data[$user_language]) ? '' : 'add/' . $src_language . '/';

      // Append the user language
      $lang_append = $new_translation_prefix . $user_language;

      // Build complete URL and redirect
      $new_url = str_replace(' ', '', '/node/' . $nid . '/edit/' . $lang_append);
      drupal_goto($new_url);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function dosomething_global_node_insert($node) {
  $user = user_load($node->uid);
  // If we are saving a new campaign and the user is a regional admin.
  if ($node->type == 'campaign' && dosomething_global_is_regional_admin($user)) {
    // Set the node language to the author's lang.
    $node->language = dosomething_global_get_user_language($user);
  }
}

/**
 * Implements hook_form_alter().
 */
function dosomething_global_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Only run this form alter on translatable types.
  $translatable_types = explode(',', TRANSLATABLE_TYPES);
  if (!(in_array($form['type']['#value'], $translatable_types))) {
    return;
  }
  // Get the last item in the url, to get the edit/add node language.
  $node_lang = array_pop(explode('/', (parse_url(current_path(), PHP_URL_PATH))));
  $translations = $form['#node']->translations->data;
  // If we are on a node lang page, and a translation exists
  if (array_key_exists($node_lang, $translations)) {
    // Set the publish status to the translation status
    $form['translation']['status']['#default_value'] = $translations[$node_lang]['status'];
  }
  else {
    // Otherwise, don't autocheck that publish box.
    $form['translation']['status']['#default_value'] = FALSE;
  }

  // Check if the user is a mexico or brazil admin
  if (dosomething_global_is_regional_admin()) {
    // Hide language selector if it's shown.
    if (!empty($form['language']['#access'])) {
      $form['language']['#access'] = FALSE;
    }
    // Get translatable fields.
    $fields = $form_state['field'];
    foreach ($fields as $field_name => $field) {
      $field_info = field_info_field($field_name);
      // If the field is not translatable disable access
      if (!$field_info['translatable'] && strpos($field_name, '#') === FALSE) {
        $form[$field_name]['#access'] = FALSE;
      }
    }
    // Hide some extra things from the form.
    $form['translation']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
  }
}

/**
 * Implements hook_menu_alter().
 */
function dosomething_global_menu_alter(&$items) {
  // Hide the translate tab for people not on staff.
  $items['node/%node/translate']['access callback'] = 'user_access';
  $items['node/%node/translate']['access arguments'] = array('translate any entity');
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function dosomething_global_menu_local_tasks_alter(&$data, $route_name) {
  // Verify we're operating on a node edit page
  if ($route_name['path'] === 'node/%/edit' || $route_name['path'] === 'node/%/edit/add/%/%') {
    // Only perform this for regional admins
    if (dosomething_global_is_regional_admin()) {
      // Remove tabs from the edit page
      if (isset($data['tabs'][1]['output'])) {
        unset($data['tabs'][1]['output']);
      }

      // Remove the translate tab in CMS side for regional admins
      $remove_translate_tab_script = "jQuery(document).ready(function () { var tabMenu = jQuery('ul.tabs.primary'); var tab = tabMenu.find('li > a:contains(\"Translate\")').parent().remove(); });";
      drupal_add_js($remove_translate_tab_script, 'inline');
    }
  }
}

/**
 * Returns if the user is a regional admin
 *
 * @param Object $user
 *   Optional - A specified user to check
 *
 * @return SelectQuery object
 */
function dosomething_global_is_regional_admin($user = NULL) {
  if (!isset($user)) {
    global $user;
  }
  $regional_roles = _dosomething_global_get_regional_roles();
  foreach ($user->roles as $role) {
    if (in_array($role, $regional_roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Get the roles that are defined as regional admins.
 *
 * @return - array
 *  The roles that are regional admins.
 */
function _dosomething_global_get_regional_roles() {
  $languages = variable_get('dosomething_global_language_map', '');
  foreach ($languages as $language) {
    if (isset($language['default_roles'][0])) {
      $roles[] = $language['default_roles'][0];
    }
  }
  return $roles;
}

/**
 * Returns the user's langauge based on the role.
 *
 * @param Object $user
 *   Optional - A specified user to check
 *
 * @return string
 *   The language key.
 */
function dosomething_global_get_user_language($user = NULL) {
  if (!isset($user)) {
    global $user;
  }
  $lang_map = variable_get('dosomething_global_language_map', '');
  foreach ($lang_map as $lang_key => $lang) {
    // If we have a role with the language.
    if (isset($lang['default_roles'][0])) {
      $role_to_lang[$lang_key] = $lang['default_roles'][0];
    }
  }
  foreach ($user->roles as $role) {
    // If the array search returns a lang key, return that.
    if (is_string($key = array_search($role, $role_to_lang))) {
      return $key;
    }

  }
  // If we didn't find a user role return english default.
  return 'en';
}

/**
 * Returns a list of all the countries defined in the strongarm
 *
 * @return array
 *  All of the supported countries
 */
 function dosomething_global_get_countries() {
   $lang_map = variable_get('dosomething_global_language_map', '');
   $countries = array();
   foreach ($lang_map as $lang) {
     $country = $lang['country'];

     // Prevents global english from slipping through
     if ($country != NULL) {
       array_push($countries, $country);
     }
   }
   array_push($countries, "global");
   return $countries;
 }

/**
 * Gets the country from a given language.
 *
 * @param string language
 *  A two letter language code.
 *
 * @return string language
 *  The country that maps to the language passed in.
 */
function dosomething_global_convert_language_to_country($language) {
  $lang_map = variable_get('dosomething_global_language_map', '');
  return $lang_map[$language]['country'];
}

/**
 * Converts the given country into its assigned language.
 *
 * @param string country
 *  The country Code
 *
 * @return
 *  The language mapped to this country or NULL
 */
function dosomething_global_convert_country_to_language($country) {
  $lang_map = variable_get('dosomething_global_language_map', '');
  foreach ($lang_map as $lang_key => $lang) {
    if ($lang['country'] == $country) {
      return $lang_key;
    }
  }
  // It is not the job of this function to determine a default language
  return NULL;
}

/*
 * Get the appropriate language for the application.
 *
 * @param $account
 *   The user's account
 * @param  $node
 *   Optional node.
 *
 */
function dosomething_global_get_language($account, stdClass $node = NULL) {
  if ($node) {
    // If there is a published translation for the node in the user's language, use it.
    if ($node->translations->data{$account->language}['status']) {
      $language = $account->language;
    }
    // If there's no published translation in their language try 'en-global'.
    elseif ($node->translations->data['en-global']['status']) {
      $language = 'en-global';
    }
    // Default to node language if there's no translation in their language and no 'en-global'.
    else {
      $language = $node->language;
    }
  }
  elseif ($language = $account->language) {
    return $language;
  }
  else {
    $language = dosomething_global_get_user_language($account);
  }

  return $language;
}
