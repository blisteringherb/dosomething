<?php
/**
 * @file
 * Code for the DoSomething User feature.
 */

include_once 'dosomething_user.address.inc';
include_once 'dosomething_user.features.inc';
include_once 'dosomething_user_valid_address.inc';
include_once 'dosomething_user.theme.inc';


/**
 * Implements hook_preprocess_page.
 */
function dosomething_user_preprocess_page(&$vars) {
  $school_api_endpoint = variable_get('dosomething_user_school_api_endpoint', 'http://lofischools.herokuapp.com/search');
  if (isset($_SESSION['dosomething_user_log_login'])) {
    dosomething_helpers_add_analytics_event("login", $_SESSION['dosomething_user_log_login']);
    unset($_SESSION['dosomething_user_log_login']);
  }

  $date_format = (dosomething_settings_get_geo_country_code() === 'US') ? 'MM/DD/YYYY' : 'DD/MM/YYYY';
  drupal_add_js(
    array('dosomethingUser' =>
      array(
        'schoolFinderAPIEndpoint' => $school_api_endpoint,
      ),
      'dsValidation' => array('dateFormat' => $date_format)
    ),
    'setting'
  );
}

/**
 * Implements hook_init().
 */
function dosomething_user_init() {
  // If viewing a file/[fid] page:
  if (arg(0) == 'file' && is_numeric(arg(1))) {
    dosomething_user_non_staff_redirect();
  }

  // If viewing a node/[nid] page:
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    // Load that node.
    $node = menu_get_object();
    // If node type is staff only:
    if (in_array($node->type, dosomething_user_get_staff_only_types())) {
      dosomething_user_non_staff_redirect();
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function dosomething_user_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_menu().
 */
function dosomething_user_menu() {
  $items = array();
  $items['user/validate/address'] = array(
    'title' => 'address',
    'access callback' => TRUE,
    'page arguments' => array(3),
    'page callback' => 'dosomething_user_validate_user_address',
    'file' => 'dosomething_user_valid_address.inc'
  );
  $items['admin/config/dosomething/dosomething_user'] = array(
    'title' => 'DoSomething User',
    'description' => 'Admin configuration form for DoSomething User.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_user_admin_config_form'),
    'file' => 'dosomething_user.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
  );
  $items['admin/config/dosomething/dosomething_user/ups-api-settings'] = array(
    'title' => t('UPS API Configuration'),
    'description' => t('UPS integration that provices address validation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_user_ups_api_settings'),
    'file' => 'dosomething_user_valid_address.inc',
    'access callback' => 'dosomething_user_ups_api_config_access',
  );
  $items['user/%user/info'] = array(
    'title' => 'Edit info',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_user_info_form', 1),
    'access callback' => 'user_access',
    'access arguments' => array('edit user info'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/users/clean-slate'] = array(
    'title' => 'Clean Slate',
    'access callback' => 'user_access',
    'access arguments' => array('access administration menu'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_user_clean_slate_form'),
    'file' => 'dosomething_user.admin.inc',
    'weight' => 500,
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function dosomething_user_permission() {
  return array(
    'edit user info' =>  array(
      'title' => t('Edit user information'),
      'description' => t('Can edit any user info form.'),
    )
  );
}

/**
 * Implements hook_admin_paths().
 */
function dosomething_user_admin_paths() {
  $paths = array(
    'user/*/info' => TRUE,
  );
  return $paths;
}

/**
 * Access callback for UPS API configuration page.
 *
 * @see dosomething_user_menu()
 */
function dosomething_user_ups_api_config_access() {
  // If administrator:
  if (user_access('administer modules')) {
    // Display page if we are validating addresses.
    return variable_get('dosomething_user_validate_address', FALSE);
  }
}

/**
 * Returns an array of node types that only staff can view.
 */
function dosomething_user_get_staff_only_types() {
  return array('fact', 'image', 'campaign_run');
}

 /**
  * Confirms that the provided string is a valid US phone number.
  *
  * A valid phone number is a number with either 10 or 11 digits
  * (as long as the first digit is a "1").
  * Valid phone numbers do not have 3 consecutive 5's in any part, nor do they
  * use punctuation where there should be numbers.  Phone numbers also
  * do not have 9 consecutive, equal digits (e.g. 999-999-9999).
  *
  * @code
  *  dosomething_user_valid_mobile('123-456-7890');
  *  # => true
  *  dosomething_user_valid_mobile('123.456 7890');
  *  # => true
  *  dosomething_user_valid_mobile('1 (123) 456-7890');
  *  # => true
  *  dosomething_user_valid_mobile('123-555-9942');
  *  # => true
  *  dosomething_user_valid_mobile('1 902 #@@ 1234');
  *  # => false
  *  dosomething_user_valid_mobile('999 999 9999');
  *  # => false
  * @endcode
  *
  * @param string $number
  *   The mobile phone number that should be validated.
  *
  * @return bool
  *   True if valid, else false.
  */
function dosomething_user_valid_mobile($number) {
  preg_match('#^(?:\+?([0-9]{1,3})([\-\s\.]{1})?)?\(?([0-9]{3})\)?(?:[\-\s\.]{1})?([0-9]{3})(?:[\-\s\.]{1})?([0-9]{4})#', preg_replace('#[\-\s\.]#', '', $number), $valid);
  preg_match('#([0-9]{1})\1{9,}#', preg_replace('#[^0-9]+#', '', $number), $repeat);
  return !empty($valid) && empty($repeat);
}

/**
 * Determines if a user is on the ds staff.
 *
 * @param object $user
 *   A user object.
 *
 * @return bool
 *   Returns true if user has a staff role applied, else false.
 */
function dosomething_user_is_staff($user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  // Create an array of staff role ids.
  $staff_roles = array(
    user_role_load_by_name('administrator')->rid,
    user_role_load_by_name('global admin')->rid,
    user_role_load_by_name('editor')->rid,
    user_role_load_by_name('communications team')->rid,
    user_role_load_by_name('member support')->rid,
  );

  // Does this user have a staff rid?
  if (array_intersect(array_keys($user->roles), $staff_roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function dosomething_user_form_alter(&$form, $form_state, $form_id) {
  global $user;
  $account = $user;
  // If UPS is set to validate, and the user is from the US, validate address.
  $validate_address = (variable_get('dosomething_user_validate_address') && dosomething_settings_get_geo_country_code() === 'US');

  switch ($form_id) {
    case 'user_login_block':
    case 'user_login':
      // Add additional submission/validation/actions.
      $form['#action'] = '/user/login';
      array_unshift($form['#validate'], 'dosomething_user_login_validate');
      // Helper text & additional data.
      _dosomething_user_add_signup_data($form);
      $form['#submit'][] = 'dosomething_user_login_submit';
      $_SESSION['dosomething_user_log_login'] = "login";
    break;

    case 'user_profile_form':
    case 'user_register_form':
      // Gather helper text.
      _dosomething_user_register_helper_text($form);
      // Conditionally displays certain fields based on configuration settings.
      _dosomething_user_global_display_fields($form);

      // Force action to post to the user registration, but not on the add people screen.
      if ($form_id == 'user_register_form' && $_SERVER['REQUEST_URI'] != '/admin/people/create') {
        $form['#action'] = '/user/register';
        $form['#submit'][] = 'dosomething_user_new_user';
        if (module_exists('dosomething_global')) {
          $form['#submit'][] = 'dosomething_user_new_user_attributes';
        }
        // Unsets relevant register form fields based on configuration variables.
        _dosomething_user_register_display_fields($form);
        // Add campaign data, if needed.
        _dosomething_user_add_signup_data($form);
      }
      else {
        $form['#submit'][] = 'dosomething_user_update_user';
      }

      // Add extra validation on the edit page, for addresses.
      $current_page = $_SERVER['REQUEST_URI'];
      if (preg_match('/user\/([0-9]+)\/edit/', $current_page) && $validate_address) {
        $form['#validate'][] = 'dosomething_user_validate_address_field';
      }


      // Hide specific fields from non-staff.
      if (!dosomething_user_is_staff()) {
        unset($form['field_partner']);
        unset($form['field_school_id']);
        unset($form['field_user_registration_source']);
        unset($form['picture']);
        unset($form['field_under_thirteen']);
        unset($form['field_job_title']);
        // Add an after build to remove the language switcher.
        $form['#after_build'][] = 'dosomething_user_remove_language_switcher';
      }
      // else if staff:
      else {
        // Registration Source should always be read-only.
        $form['field_user_registration_source']['#disabled'] = TRUE;
        $form['field_under_thirteen']['#disabled'] = TRUE;
      }

      $form['#after_build'][] = 'dosomething_user_remove_extra_values_from_address_field';
      if ($is_validate_address_set) {
        $form['#after_build'][] = 'dosomething_user_add_validation_attributes_to_address_fields';
      }

      // Change date format for non-us users.
      if (dosomething_settings_get_geo_country_code() !== 'US') {
        $form['#after_build'][] = 'dosomething_user_non_us_birthday_format';
      }

      // Custom validation & submission handlers.
      $form['#validate'][] = 'dosomething_user_register_validate';
      $form['#submit'][] = 'dosomething_user_login_submit';

    break;

    case 'user_pass':
      $form['#submit'][] = 'dosomething_user_user_pass_submit';
    break;

  }
}

/**
 * After build to change date format of birthdate field for non-us users
 * so it passes date validation
 */
function dosomething_user_non_us_birthday_format($form, &$form_state) {
  $form_state['field']['field_birthdate'][LANGUAGE_NONE]['instance']['widget']['settings']['input_format'] = 'd/m/Y - H:i:s';
  return $form;
}

/**
 * After build to remove language switcher.
 *
 */
function dosomething_user_remove_language_switcher($form, &$form_state) {
  unset($form['locale']);
  return $form;
}

/**
 * After build to alter the address field options.
 *
 * Removes all extra state options from the addressfield dropdown.
 */
function dosomething_user_remove_extra_values_from_address_field($form, &$form_state) {
  // Forms that use field_address as Form API element.
  $user_address_form_ids = array(
    'dosomething_signup_user_signup_data_form',
    'dosomething_shipment_form',
  );
  // Get the right form address field.
  if ($form['#form_id'] == 'user_profile_form') {
    $options = &$form['field_address'][LANGUAGE_NONE][0];
  }
  elseif (in_array($form['#form_id'], $user_address_form_ids)) {
    $options = &$form['user_address'];
  }
  // Pass by ref to ensure changes are made to field.
  $options = &$options['address']['locality_block']['administrative_area']['#options'];
  // @todo Only remove states if address country == US.
  dosomething_user_remove_extra_us_states($options);
  return $form;
}

/**
 * After build to add validation to address fields.
 */
function dosomething_user_add_validation_attributes_to_address_fields($form, &$form_state) {
  // Get the right form address field.
  if ($form['#form_id'] == 'user_profile_form') {
    $address = &$form['field_address'][LANGUAGE_NONE][0];
  }
  else {
    // @see dosomething_user_address_form_element().
    $address = &$form['user_address'];
  }

  // Add `data-validate` attributes:
  $address['address']['street_block']['thoroughfare']['#attributes']['data-validate'] = 'address1';
  $address['address']['street_block']['premise']['#attributes']['data-validate'] = 'address2';
  $address['address']['locality_block']['locality']['#attributes']['data-validate'] = 'city';
  $address['address']['locality_block']['administrative_area']['#attributes']['data-validate'] = 'state';

  $zip_validation = theme_get_setting('user_validate_js_postcode') ? 'zipcode' : '';
  $address['address']['locality_block']['postal_code']['#attributes']['data-validate'] = $zip_validation;

  return $form;
}

/**
 * Validate address field as it is on the user object
 *
 * @param array $form
 *  A drupal form.
 * @param array $form_state
 *  A drupal form_state array.
 *
 */
function dosomething_user_validate_address_field($form, &$form_state) {
  $first_name = $form_state['input']['field_first_name'][LANGUAGE_NONE][0]['value'];
  $last_name = $form_state['input']['field_last_name'][LANGUAGE_NONE][0]['value'];
  $address = $form_state['input']['field_address'][LANGUAGE_NONE][0];

  // Only validate if we have values in the array.
  if ($address['thoroughfare'] !== '' && $address['locality'] !== '' && $address['administrative_area'] !== '' && $address['postal_code'] !== '') {
    $formatted_address = dosomething_user_validate_any_address($first_name, $last_name, $address);

    // Did we not get any results?
    if (in_array('sorry', $formatted_address)) {
      form_set_error('dosomething_user_validate_address', t('Hmmm, we couldn’t find that address. Please try again.'));
    }
    // Did it come back from the api as ambiguous? -- Check with the user.
    elseif (in_array('ambiguous', $formatted_address)) {
      dosomething_user_set_address_values($form, $form_state, $formatted_address);
      form_set_error('dosomething_user_ambiguous_address', t('Hmmm, we couldn’t find that address. Did you mean: '));
    }
    // We have a full address, save it!
    else {
      dosomething_user_set_address_values($form, $form_state, $formatted_address);
    }
  }
}

/**
 * Set the formatted address values in a form.
 *
 * @param array $form
 *  A drupal form.
 * @param array $form_state
 *  A drupal form_state.
 * @param array $address
 *  A validated drupal addressfield array.
 */
function dosomething_user_set_address_values($form, &$form_state, $address) {
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['street_block']['thoroughfare'],
      array('value' => $address['thoroughfare']), $form_state);
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['street_block']['premise'],
      array('value' => $address['premise']), $form_state);
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['locality_block']['locality'],
      array('value' => $address['locality']), $form_state);
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['locality_block']['administrative_area'],
      array('value' => $address['administrative_area']), $form_state);
  form_set_value($form['field_address'][LANGUAGE_NONE][0]['address']['locality_block']['postal_code'],
      array('value' => $address['postal_code']), $form_state);
}

/**
 * Custom password reset submission handler.
 *
 * Sends request to mbp (Message Broker Producer) to send transactional
 * email message with reset link.
 */
function dosomething_user_user_pass_submit($form, &$form_state) {
  if (isset($form_state['input']['name'])) {
    $account = user_load_by_mail($form_state['input']['name']);
    if (isset($account->mail)) {
      if (module_exists('dosomething_global')) {
        $user_country_code = dosomething_global_convert_language_to_country($account->language);
      }
      // Send external message request
      $params = array(
        'email' => $account->mail,
        'uid' => $account->uid,
        'first_name' => dosomething_user_get_field('field_first_name', $account),
        'reset_link' => user_pass_reset_url($account),
        'user_language'     => $account->language,
        'user_country'      => isset($user_country_code) ? $user_country_code : 'US'
      );
      if (module_exists('dosomething_mbp')) {
        dosomething_mbp_request('user_password', $params);
      }
    }
  }
}

/**
 *
 */
function dosomething_user_update_user($form, &$form_state) {
  if (!module_exists('dosomething_northstar')) { return; }
  // Forward user updates into Northstar.
  dosomething_northstar_update_user($form_state);
}

/**
 * Custom new user login submission handler.
 *
 * Does actions after a new user has registered via the web.
 * Sign user up for emails/texts.
 */
function dosomething_user_new_user($form, &$form_state) {
  $_SESSION['dosomething_user_log_login'] = "register";
  if (!module_exists('dosomething_mbp') || !module_exists('dosomething_signup')) {
    return;
  }

  global $user;
  $account = $user;

  // Should we sign this kid up for messages?
  if (dosomething_user_is_under_thirteen()) {
    return;
  }

  // Send external message request.
  $params = array(
    'mailchimp_list_id' => dosomething_signup_get_mailchimp_list_id(),
    'email'             => $account->mail,
    'uid'               => $account->uid,
    'first_name'        => dosomething_user_get_field('field_first_name', $account),
    'birthdate'         => dosomething_user_get_field('field_birthdate', $account),
    'user_language'     => $account->language,
    'user_country'      => isset($user_country_code) ? $user_country_code : 'US'
  );

  // 26+ Club: Override Mobile Commons.
  $mobile = dosomething_user_get_field('field_mobile', $account);
  $opt_in = variable_get('dosomething_signup_mobilecommons_opt_in_path_user_register');
  if (!empty($opt_in) && !empty($mobile)) {
    // Ignore 26+ Club is enabled and user is older than 26.
    if (!dosomething_signup_is_26plusclub_member($account)) {
      $params['mobile'] = $mobile;
      $params['mc_opt_in_path_id'] = $opt_in;
    }
  }

  // 26+ Club: Override MailChimp.
  if (dosomething_signup_is_26plusclub_member($account)) {
    $grouping_id = variable_get('dosomething_signup_26plusclub_mailchimp_grouping_id_register');
    if ($grouping_id) {
      $params['mailchimp_grouping_id'] = $grouping_id;
    }

    $group_name = variable_get('dosomething_signup_26plusclub_mailchimp_group_name_register');
    if ($group_name) {
      $params['mailchimp_group_name'] = $group_name;
    }

    $template_name = variable_get('dosomething_signup_26plusclub_mailchimp_template_name_register');
    if ($template_name) {
      $params['email_template'] = $template_name;
    }
   }

  dosomething_mbp_request('user_register', $params);
}

function dosomething_user_new_user_attributes($form, &$form_state) {
  dosomething_user_set_global_attributes();
}

/**
 * Sets the user global attributes and sends them to Northstar.
 *
 * @param object $account
 *   The account to return value for. If NULL, uses global $user.
 * @param string $country_code
 *   The country code where the user currently resides. If NULL, uses
 *   the headers in current request.
 * @param string $language
 *   The new language to set on the user. If NULL, gets the matching
 *   language or defaults.
 */
function dosomething_user_set_global_attributes($user = NULL, $country_code = NULL, $language = NULL) {
  if ($user == NULL) {
    global $user;
    $account = $user;
  }
  if ($country_code == NULL) {
    $country_code = dosomething_settings_get_geo_country_code();
    // If no Fastly headers set, use US EN
    if ($country_code == NULL) {
      $language = 'en';
    }
  }
  // If the language wasn't specified in the function call, determine the user language
  if ($language == NULL) {
    $converted_language = dosomething_global_convert_country_to_language($country_code);
    $language = 'en-global';

    // If the country in the headers matched to a language in our strongarm
    if ($converted_language != NULL) {

      // Verify the language is installed on the system,
      $system_languages = language_list();
      foreach ($system_languages as $lang_key => $system_lang) {
        if ($converted_language == $lang_key) {
          $language = $converted_language;
          break;
        }
      }
    }
  }
  user_save($account, ['language' => $language]);
  //TODO: (#5263) Send $language and $country_code to NorthStar
}

/**
 * Checks that user is over 13.
 *
 * This is needed to make sure a new user is old enough
 * to get any external messages from us.
 *
 * @return bool
 *  Returns true if user is under 13, else false.
 */
function dosomething_user_is_under_thirteen($user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  $birthday = dosomething_user_get_field('field_birthdate', $user);
  // Get the date 13 years ago today.
  $date_cutoff = strtotime('-13 years');
  if ($date_cutoff < $birthday) {
    // Set under 13 bool to true.
    //@TODO: Cron that checks users in these values and updates users.
    $wrapper = entity_metadata_wrapper('user', $user);
    $wrapper->field_under_thirteen->set(1);
    $wrapper->save();
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Checks if user is an "old person", meaning age 26 or older.
 *
 * @return bool
 *  Returns TRUE if user is an old person, else FALSE.
 */
function dosomething_user_is_old_person($user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  $birthday = dosomething_user_get_field('field_birthdate', $user);
  // Get the date 26 years ago today.
  $date_cutoff = strtotime('-26 years');
  return $date_cutoff > $birthday;
}

/**
 * Custom login submission handler.
 *
 * If there's a hidden nid, sign the user up for a campaign.
 *
 * This function will only work upon registration if account variables
 * are set to the following:
 * -- A visitor can register for the site without admin approval
 * -- Email verification is not required when user creates account.
 *
 * Otherwise, the global $user upon account creation is set with uid 0
 * and signup will fail.
 *
 * @see dosomething_user_strongarm()
 */
function dosomething_user_login_submit($form, &$form_state) {
  // If nid is not present, nothing to sign up for.  Exit.
  if (isset($form['nid']['#value'])) {
    $nid = $form['nid']['#value'];
    $source = NULL;
    if (isset($form['source']['#value'])) {
      $source = $form['source']['#value'];
    }
    // Signup global user for node $nid.
    if (module_exists('dosomething_signup')) {
      // First check if the campaign is closed.
      $campaign = node_load($nid);
      if (dosomething_campaign_is_closed($campaign)) {
        dosomething_signup_user_presignup($nid);
      }
      else {
        dosomething_signup_user_signup($nid, NULL, $source);
      }
    }

  }
  // Send the user into northstar.
  if (module_exists('dosomething_northstar')) {
    dosomething_northstar_register_user($form_state);
  }
  // After all logins, except reportback pages redirect to page user was just on.
  if (isset($source) && stripos($source, 'reportback') > 0) {
   $form_state['redirect'] = drupal_get_path_alias($_SERVER['HTTP_REFERER']);
  }
  elseif (isset($nid)) {
    // Redirect to campaign node on reportback permalink pages.
    $form_state['redirect'] = drupal_get_path_alias('node/' . $nid);
  }
}

/**
 * Implements hook_user_insert().
 */
function dosomething_user_user_insert(&$edit, &$account, $category = NULL) {
  // Only automatically generate 'name' if not on staff.
  if (!dosomething_user_is_staff()) {
    // Replace fake user name with uid.
    db_update('users')
      ->fields(array('name' => $account->uid))
      ->condition('uid', $account->uid)
      ->execute();

    $edit['name'] = $account->uid;
    $account->name = $account->uid;
  }
}

/**
 * Add hidden campaign nid to signup/registration form.
 *
 * @param array $form
 *  A drupal form.
 */
function _dosomething_user_add_signup_data(&$form) {
  if (!module_exists('dosomething_signup')) { return; }

  // If we're viewing a node to signup for:
  if ($nid = dosomething_signup_get_login_signup_nid()) {
    $form['nid'] = array(
      '#type' => 'hidden',
      '#value' => $nid,
      '#access' => FALSE,
    );
    // Check query string for signup source value.
    if ($source = dosomething_signup_get_query_source()) {
      $form['source'] = array(
        '#type' => 'hidden',
        '#value' => $source,
        '#access' => FALSE,
      );
    }
    $form['#action'] = '/' . drupal_get_path_alias('node/' . $nid);
    // Source needs to be added into query string into form action,
    // in order to be found later in form submit states.
    if ($source) {
      $form['#action'] = $form['#action'] . '?source=' . $source;
    }
  }
}

/**
 * Registration helper text.
 *
 * @param array $form
 *  A drupal form.
 */
function _dosomething_user_register_helper_text(&$form) {
  // Hide the username field & randomly generate the value for non-staffers.
  if (!dosomething_user_is_staff()) {
    $form['account']['name']['#type'] = 'hidden';
    $form['account']['name']['#value'] = user_password();
  }
}

/**
 * Conditionally displays User fields based on display settings.
 *
 * @see dosomething_user_form_alter().
 *
 * @param array $form
 *  A Drupal Form API array, expected forms are User Register/Profile forms.
 */
function _dosomething_user_global_display_fields(&$form) {
  // List of fields to globally turn on/off.
  $display_vars = array(
    'opt_in_email',
    'opt_in_sms',
  );
  // For each display variable:
  foreach ($display_vars as $var) {
    $var_name = 'dosomething_user_register_form_display_' . $var;
    $display = variable_get($var_name, FALSE);
    $field_name = 'field_' . $var;
    // If variable is set to NOT display:
    if (!$display) {
      // Unset the corresponding form field.
      $form[$field_name]['#access'] = FALSE;
    }
  }
}

/**
 * Conditionally displays user fields to collect on the Registration form.
 *
 * @see dosomething_user_form_alter().
 *
 * @param array $form
 *  A Drupal Form API array, expected form is the User Register form.
 */
function _dosomething_user_register_display_fields(&$form) {

  // Check if last name is being collected.
  $var_name = 'dosomething_user_register_form_display_last_name';
  $collect_last_name = variable_get($var_name, FALSE);
  $field_name = 'field_last_name';

  if ($collect_last_name) {
    // Make it required.
    $form[$field_name]['#required'] = TRUE;
  }
  // Else unset from the form.
  else {
    unset($form[$field_name]);
  }

  // Check if postal code is being collected.
  $var_name = 'dosomething_user_register_form_display_postal_code';
  $collect_postal_code = variable_get($var_name, FALSE);
  // Postal code is a form element within the field_address field.
  // We store 'field_address' as the field_name value to unset.
  $field_name = 'field_address';

  if ($collect_postal_code) {
    // Adds form element for postal code only to the register form.
    $form['#after_build'][] = 'dosomething_user_address_field_postal_code_only';
  }
  // Else deny access to the corresponding form field.
  else {
    $form[$field_name]['#access'] = FALSE;
  }

}

/**
 * After build function to unset all address field elements except postal code.
 */
function dosomething_user_address_field_postal_code_only($form, &$form_state) {
  $element = &$form['field_address'][LANGUAGE_NONE][0]['address'];
  // Hide the Address field label.
  unset($element['#title']);
  // Require Postal Code.
  $element['locality_block']['postal_code']['#required'] = TRUE;
  // Remove all other address fields.
  unset($element['street_block']);
  unset($element['locality_block']['locality']);
  unset($element['locality_block']['administrative_area']);
  return $form;
}

/**
 * Custom login validation.
 *
 * Allows for users to login via email or mobile number.
 * @see dosomething_user_form_alter()
 */
function dosomething_user_login_validate($form, &$form_state) {
  // Note: Taken from logintoboggan module.
  if (isset($form_state['values']['name']) && $form_state['values']['name']) {
    if ($account = dosomething_user_get_user_by_email($form_state['values']['name'])) {
      form_set_value($form['name'], $account->name, $form_state);
    }
    elseif ($number = $form_state['values']['name']) {
      if ($account = dosomething_user_get_user_by_mobile($number)) {
        form_set_value($form['name'], $account->name, $form_state);
      }
    }
  }
}

/**
 * Additional user registration validation hook.
 *
 * Clean user data on registration.
 * @see dosomething_user_form_alter()
 */
function dosomething_user_register_validate($form, &$form_state) {
  $mobile = $form_state['values']['field_mobile'][LANGUAGE_NONE][0]['value'];
  if (!empty($mobile)) {
    // Clean the user input text.
    $mobile_clean = dosomething_user_clean_mobile_number($mobile);

    // Get the user's current number & see if they are updating.
    // We have to send in the uid of the form we are on, not the global user
    // When admins are updating accounts this will fail!
    $account = $form_state['build_info']['args'][0];
    $current_number = dosomething_user_get_field('field_mobile', $account);
    if ($mobile_clean != $current_number && ($user = dosomething_user_get_user_by_mobile($mobile_clean))) {
      // This dude already has an account.
      form_set_error('dosomething_user_already_registered', t('The phone number '. $mobile . ' is already registered. Have you ' . l('forgotten your password?', 'user/password')));
    }
    else {
      // Store only the numbers.
      form_set_value($form['field_mobile'], array(LANGUAGE_NONE => array(0 => array('value' => $mobile_clean))), $form_state);
    }
  }
}

/**
 * Get a user by email address.
 *
 * @param string $email
 *   The user's email.
 *
 * @return object/bool
 *   If true return the user object, else false.
 */
function dosomething_user_get_user_by_email($email) {
  $user = user_load_by_mail($email);
  return $user ? $user : FALSE;
}

/**
 * Search for users users by their mobile phone number.
 *
 * @param string $number
 *   The mobile phone number for which you are searching.
 *
 * @return object/bool
 *   The user account object, or false if no user was found.
 */
function dosomething_user_get_user_by_mobile($number) {
  if ($clean_number = dosomething_user_clean_mobile_number($number)) {

    $query = db_select('field_data_field_mobile', 'm')
              ->fields('m', array('entity_id'))
              ->condition('field_mobile_value', $clean_number)
              ->execute();
    $uid = $query->fetchField(0);
    if (is_numeric($uid)) {
      return user_load($uid);
    }
    return FALSE;
  }

  return FALSE;
}


/**
 * Clean input phone number of all non-numeric characters.
 *
 * @param string $number
 *   The user-input mobile number.
 *
 * @return string/bool
 *   Numeric-only string of the phone number, or FALSE if not a 10-digit number.
 */
function dosomething_user_clean_mobile_number($number) {
  if (dosomething_user_valid_mobile($number)) {
    $trimmed_number = ltrim(preg_replace('#[^0-9]#', '', $number));

    // Make sure the number is 10 digits long.
    if (strlen($trimmed_number) == 10) {
      return $trimmed_number;
    }
    // Else if it contains a leading 1.
    // (iPhones return the 1 when you copy/paste a number from your contacts).
    else if (strlen($trimmed_number) == 11 && $trimmed_number[0] == 1) {
      // Remove the leading 1.
      return substr($trimmed_number, 1);
    }
    return FALSE;
  }
  return FALSE;
}

/**
 * Create a user account when provided with only a mobile phone number.
 *
 * @param string $number
 *   User's phone number.
 */
function dosomething_user_create_user_by_mobile($number) {
  if ($clean_number = dosomething_user_clean_mobile_number($number)) {
    $user_data = array(
      'name' => user_password(), // Generating unique dummy name. dosomething_user_user_insert() will convert this to the uid.
      'mail' => $clean_number . '@mobile', // Provide a dummy email address.
      'pass' => user_password(),
      'status' => 1,
      'field_mobile' => array(LANGUAGE_NONE => array(0 => array('value' => $clean_number))),
    );

    $user = user_save('', $user_data);

    return $user;
  }

  return FALSE;
}

/**
 * Returns value for given field on given user.
 *
 * @param string $field_name
 *   The machine name of the field that stores value to return.
 * @param object $account
 *   The account to return value for. If NULL, uses global $user.
 * @param string $format
 *   Optional- format to return.
 *    - Dates, http://www.php.net/manual/en/function.date.php.
 *    - Strings uclower, strtolower, strtoupper.
 *
 * @return mixed
 *   Returns NULL if not set, otherwise whatever type of data the field stores.
 */
function dosomething_user_get_field($field_name, $account = NULL, $format = NULL) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }

  $wrapper = entity_metadata_wrapper('user', $account);
  $field_value =  $wrapper->{$field_name}->value();

  // Check if there is a specifc function handler for that field, use that first.
  $handler = 'dosomething_user_get_' . $field_name;
  if (function_exists($handler)) {
    $field_value = ($format == NULL) ? $handler($field_value) : $handler($field_value, $format);
  }
  return $field_value;

}

/**
 * Returns a user's first name.
 *
 * @param object $account
 *   The account to return value for.
 * @param string $format
 *   Optional- format to return.
 *    strtolower, strtoupper, ucwords
 *
 * @return mixed
 *   Returns NULL if not set, otherwise string.
 */
function dosomething_user_get_field_first_name($field_value, $format = 'ucwords') {
  return dosomething_user_format_string($field_value, $format);
}

/**
 * Returns a user's last name.
 *
 * @param object $account
 *   The account to return value for.
 * @param string $format
 *   Optional- format to return.
 *    strtolower, strtoupper, ucwords
 *
 * @return mixed
 *   Returns NULL if not set, otherwise string.
 */
function dosomething_user_get_field_last_name($field_value, $format = 'ucwords') {
  return dosomething_user_format_string($field_value, $format);
}


/**
 * Helper function to prepare an array of user fields.
 *
 * Extends existing array of user form values with Entity API's fields.
 * The fields will be added to &$edit array prefixed with `field_`.
 * All from this flow exceprions will be processed so &$edit is ready for
 * user_save() execution.
 *
 * @param  array $edit
 *   The array of the user form values.
 * @param  array $fields
 *   The array of the user fields.
 */
function dosomething_user_set_fields(&$edit, $fields) {
  foreach ($fields as $key => $value) {
    if (empty($value)) {
      continue;
    }

    switch ($key) {
      case 'country':
      case 'postal_code':
        $edit['field_address'][LANGUAGE_NONE][0][$key] = $value;
        break;

      default:
        $edit['field_' . $key][LANGUAGE_NONE][0]['value'] = $value;
        break;
    }
  }
}


/**
 * Helper function to format strings.
 *
 * @param string $string
 *  The string to format
 * @param string $format
 *  The format that should be returned.
 *    strtolower, strtoupper, ucwords
 */
function dosomething_user_format_string($string, $format) {
    switch ($format) {
      case 'ucwords':
        return ucwords(strtolower($string));
      case 'strtoupper':
        return strtoupper($string);
      case 'strtolower':
        return strtolower($string);
    }
}

/**
 * Returns given user's birthdate.
 *
 * @param string $field_value
 *   The value of the field from `dosomething_user_get_field` to format.
 * @param string $format
 *   Optional- format to return. http://www.php.net/manual/en/function.date.php.
 *   If NULL, the raw timestamp is returned.
 *
 * @return string
 *   Returns the date in specified $format.
 */
function dosomething_user_get_field_birthdate($field_value, $format = NULL) {
  // If no format specified:
  if ($format == NULL) {
    // Return raw timestamp.
    return $field_value;
  }
  // Return date formatted per $format string.
  return format_date($field_value, 'custom', $format);
}

/**
 * Used to redirect non-staff users to the homepage.
 *
 * @see dosomething_user_init()
 */
function dosomething_user_non_staff_redirect() {
  // If logged in user is not staff:
  if (!dosomething_user_is_staff()) {
    // Without this check, the `drupal_goto` below will break `drush cc all`.
    // See https://www.drupal.org/node/1230132#comment-4790690.
    if (!drupal_is_cli()) {
      // No access for you.  Redirect to front page for now.
      drupal_goto();
    }
  }
}

/**
 * Form constructor used to edit basic user information.
 *
 * @see dosomething_user_menu()
 */
function dosomething_user_info_form($form, &$form_state, $account) {
  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $account->uid,
  );
  $form['info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Info'),
    '#description' => "Note that users can update these fields from their profile page."
  );
  $first_name = dosomething_user_get_field('field_first_name', $account);
  $form['info']['first_name'] = array(
    '#title' => "First Name",
    '#type' => 'textfield',
    '#default_value' => $first_name,
    '#required' => TRUE,
  );
  $last_name = dosomething_user_get_field('field_last_name', $account);
  $form['info']['last_name'] = array(
    '#title' => "Last Name",
    '#type' => 'textfield',
    '#default_value' => $last_name,
    '#required' => TRUE,
  );
  $city = NULL;
  $state = NULL;
  if ($address = $account->field_address[LANGUAGE_NONE][0]) {
    $city = $address['locality'];
    $state = $address['administrative_area'];
  }
  $form['info']['city'] = array(
    '#title' => "City",
    '#type' => 'textfield',
    '#default_value' => $city,
  );
  $last_name = dosomething_user_get_field('field_last_name', $account);
  $form['info']['state'] = array(
    '#title' => "State",
    '#type' => 'textfield',
    '#size' => 2,
    '#default_value' => $state,
    '#description' => t("The two letter state code."),
  );
  $form['picture'] = array(
    '#type' => 'fieldset',
    '#title' => t('Picture'),
    '#description' => "Currently, users cannot upload their own profile photo."
  );
  $form['picture']['picture_current'] = array(
    '#markup' => theme('user_picture', array('account' => $account)),
  );
  $form['picture']['upload'] = array(
    '#type' => 'managed_file',
    '#title' => t('Upload a picture'),
    '#upload_location' => file_default_scheme() . '://user/',
  );
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    ),
  );
  return $form;
}

/**
 * Submit callback for dosomething_user_info_form().
 *
 * Saves inputted values to the user profile.
 */
function dosomething_user_info_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $account = user_load($values['uid']);
  $edit['field_last_name'] = array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => $values['first_name'],
      ),
    ),
  );
  $edit['field_last_name'] = array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => $values['last_name'],
      ),
    ),
  );
  // Store the current address.
  $edit['field_address'] = $account->field_address;
  // Overwrite City/State if values are present.
  $edit['field_address'][LANGUAGE_NONE][0]['locality'] = $values['city'];
  $edit['field_address'][LANGUAGE_NONE][0]['administrative_area'] = $values['state'];
  $country_code = dosomething_settings_get_affiliate_country_code();
  $edit['field_address'][LANGUAGE_NONE][0]['country'] = $country_code;
  $file = NULL;
  // If a file was uploaded:
  if (!empty($values['upload'])) {
    $file = file_load($values['upload']);
    // Set the status to permanent to avoid getting deleted by cron.
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    $edit['picture'] = $file;
  }
  // If successful save:
  if (user_save($account, $edit) && $file) {
    // Track usage for the new file.
    file_usage_add($file, 'user', 'user', $account->uid);
  }
  drupal_set_message(t("User information saved."));
}

/**
 * Returns all records from table $tbl_name for a given user uid.
 *
 * @param string $tbl_name
 *   The name of the table to query.
 * @param int $uid
 *    The user $uid to filter by.
 *
 * @return
 *   Array of record objects.
 */
function dosomething_user_get_records($tbl_name, $uid) {
  if (db_table_exists($tbl_name)) {
   return db_select($tbl_name, 't')
    ->fields('t')
    ->condition('uid', $uid, '=')
    ->execute()
    ->fetchAll();
  }
  else {
    watchdog('dosomething_user', 'Table %tbl_name', array('%tbl_name' => $tbl_name), WATCHDOG_WARNING);
  }
}

/**
 * Implements hook_user_delete().
 */
function dosomething_user_user_delete($account) {
  dosomething_user_delete_all_data($account->uid);
}

/**
 * Deletes all entities for a given user $uid.
 *
 * To be used with great responsibility.
 *
 * @param int $uid
 *   The user $uid to delete records for.
 */
function dosomething_user_delete_all_data($uid, $display_messages = TRUE) {
  // List of all entities users can create, and their identifiers.
  $entity_list = array(
    'signup' => 'sid',
    'reportback' => 'rbid',
    'reward' => 'id',
    'shipment' => 'id',
  );
  foreach ($entity_list as $entity_type => $identifier) {
    $tbl = 'dosomething_' . $entity_type;
    // Get all records from the entity table for this user.
    $results = dosomething_user_get_records($tbl, $uid);
    if (empty($results)) {
      continue;
    }
    // Loop through each result:
    foreach ($results as $result) {
      // Load the entity.
      $entity = entity_load_single($entity_type, $result->{$identifier});
      // Store entity identifier.
      $id = $entity->{$identifier};
      $entity->delete();
      $msg = t("@type @identifier @id deleted.", array(
        '@type' => ucfirst($entity_type),
        '@identifier' => $identifier,
        '@id' => $id,
      ));
      if ($display_messages) {
        drupal_set_message($msg);
      }
      watchdog('dosomething_user', $msg);
    }
  }
}

/**
 * Returns link to Privacy Policy node.
 */
function dosomething_user_get_link_privacy_policy($text = 'Privacy Policy') {
  $nid = variable_get('dosomething_user_node_privacy_policy', 1050);
  return l(t($text), 'node/' . $nid);
}

/**
 * Returns link to Terms of Service node.
 */
function dosomething_user_get_link_terms_service($text = 'Terms of Service') {
  $nid = variable_get('dosomething_user_node_terms_service', 1049);
  return l(t($text), 'node/' . $nid);
}

/**
 * Saves given value to global user's field_school_id.
 *
 * @param string $school_id
 *   Value to store in field_school_id.
 */
function dosomething_user_save_school_id($school_id) {
  global $user;
  $account = $user;
  $edit = array();
  $edit['field_school_id'] = array(LANGUAGE_NONE => array(0 => array('value' => $school_id)));
  user_save($account, $edit);
}

/**
 * Gets the Member Count variable.
 *
 * @param bool $readable
 *   Whether or not to return the value as a readable string (e.g. 3.1 million)
 */
function dosomething_user_get_member_count($readable = FALSE) {
  $count = variable_get('dosomething_user_member_count');
  if (!$count) {
    return NULL;
  }

  if (!$readable) {
    // Put some commas in that count.
    return number_format($count);
  }

  if ($count > 1000000) {
    $num = $count / 1000000;
    $suffix =  t('million');
  }
  elseif ($count > 1000) {
    $num = $count / 1000;
    $suffix = t('thousand');
  }
  return dosomething_helpers_floor_decimal($num) . ' ' . $suffix;
}

/**
 * Implements hook_token_info().
 */
function dosomething_user_token_info() {
  $info['tokens']['site']['member-count'] = array(
    'name' => t('Member Count'),
    'description' => t('Number of site members.'),
  );
  $info['tokens']['site']['member-count-readable'] = array(
    'name' => t('Member Count - Readable'),
    'description' => t('Number of site members, formatted as "3.2 million".'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function dosomething_user_tokens($type, $tokens, array $data = array(), array $options = array()) {
 $replacements = array();
   if ($type == 'site') {
     foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'member-count':
          $replacements[$original] = dosomething_user_get_member_count();
          break;
        case 'member-count-readable':
          $replacements[$original] = dosomething_user_get_member_count(TRUE);
          break;
      }
     }
  }
  return $replacements;
}

/**
 * Returns a scaled down version of a user object.
 *
 * @param obj $user
 *  (optional) The loaded user object.
 * @return obj
 *   Available properties:
 *
 *   - uid: (int)
 *   - email: (int)
 *   - mobile: (int)
 *   - first_name: (string)
 *   - last_name: (string)
 *
 */
function dosomething_user_get_simple_user($user = NULL) {
  if (!$user) {
    global $user;
    $user = $user;
  }
  // Create a dummy object to return.
  $nice_user = new stdClass();
  $nice_user->uid = $user->uid;
  $nice_user->first_name = dosomething_user_get_field('field_first_name', $user);
  $nice_user->last_name = dosomething_user_get_field('field_last_name', $user);
  $nice_user->mobile = dosomething_user_get_field('field_mobile', $user);
  $nice_user->email = $user->mail;

  return $nice_user;
}

/**
 * Implements hook_views_pre_render().
 */
function dosomething_user_views_pre_render(&$view) {
  // If user search has a result, redirect to that user.
  if ($view->name == 'user_search' && count($view->result) == 1) {
    drupal_goto('user/' . $view->result[0]->uid);
  }

  if ($view->name == 'content_search') {
    // Remove grouping labels
    $table_style = 'table caption { display: none }';
    drupal_add_css($table_style, ['type' => 'inline']);
  }
}
